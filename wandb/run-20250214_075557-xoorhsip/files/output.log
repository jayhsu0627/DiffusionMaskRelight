INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 985
INFO:__main__:  Num Epochs = 100
INFO:__main__:  Instantaneous batch size per device = 1
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 16
INFO:__main__:  Gradient Accumulation steps = 16
INFO:__main__:  Total optimization steps = 6200
Steps:   0%|                                                                                                                                                            | 1/6200 [00:22<37:24:15, 21.72s/it, lr=6e-8, step_loss=1.07]Traceback (most recent call last):
VAE precision: torch.float16
UNet precision: torch.float32
Trainable VAE precision: torch.float32
Optimizer dtype: torch.float32
pixel_values dtype: torch.float32
depth_pixel_values dtype: torch.float32
normal_pixel_values dtype: torch.float32
alb_pixel_values dtype: torch.float32
scb_pixel_values dtype: torch.float32
shd_pixel_values dtype: torch.float32
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
torch.Size([12, 3, 256, 256])
torch.Size([1, 12, 3, 128, 128])
  File "/sdb5/DiffusionMaskRelight/train_svd_relight.py", line 1433, in <module>
    main()
  File "/sdb5/DiffusionMaskRelight/train_svd_relight.py", line 1258, in main
    model_pred = unet(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/accelerate/utils/operations.py", line 819, in forward
    return model_forward(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/accelerate/utils/operations.py", line 807, in __call__
    return convert_to_fp32(self.model_forward(*args, **kwargs))
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/amp/autocast_mode.py", line 44, in decorate_autocast
    return func(*args, **kwargs)
  File "/sdb5/DiffusionMaskRelight/models/unet_spatio_temporal_condition.py", line 482, in forward
    sample = upsample_block(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/diffusers/models/unets/unet_3d_blocks.py", line 1529, in forward
    hidden_states = attn(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/diffusers/models/transformers/transformer_temporal.py", line 361, in forward
    hidden_states_mix = temporal_block(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/diffusers/models/attention.py", line 748, in forward
    norm_hidden_states = self.norm2(hidden_states)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/normalization.py", line 217, in forward
    return F.layer_norm(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/functional.py", line 2910, in layer_norm
    return torch.layer_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 16.00 MiB. GPU 0 has a total capacity of 39.38 GiB of which 13.38 MiB is free. Including non-PyTorch memory, this process has 39.36 GiB memory in use. Of the allocated memory 38.43 GiB is allocated by PyTorch, and 432.22 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
