INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 217
INFO:__main__:  Num Epochs = 100
INFO:__main__:  Instantaneous batch size per device = 1
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 16
INFO:__main__:  Gradient Accumulation steps = 16
INFO:__main__:  Total optimization steps = 1400
Steps:   0%|                                                                                                                                                                                   | 0/1400 [00:26<?, ?it/s, lr=0, step_loss=0.796]
VAE precision: torch.float16
UNet precision: torch.float32
Optimizer dtype: torch.float32
pixel_values dtype: torch.float32
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 3, 256, 256])
torch.Size([1, 12, 1, 256, 256])
  File "/sdb5/DiffusionMaskRelight/train_svd_relight_syn.py", line 1497, in <module>
    main()
  File "/sdb5/DiffusionMaskRelight/train_svd_relight_syn.py", line 1322, in main
    model_pred = unet(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/accelerate/utils/operations.py", line 819, in forward
    return model_forward(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/accelerate/utils/operations.py", line 807, in __call__
    return convert_to_fp32(self.model_forward(*args, **kwargs))
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/amp/autocast_mode.py", line 44, in decorate_autocast
    return func(*args, **kwargs)
  File "/sdb5/DiffusionMaskRelight/models/unet_spatio_temporal_condition.py", line 447, in forward
    sample, res_samples = downsample_block(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/diffusers/models/unets/unet_3d_blocks.py", line 1316, in forward
    hidden_states = attn(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/diffusers/models/transformers/transformer_temporal.py", line 361, in forward
    hidden_states_mix = temporal_block(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/diffusers/models/attention.py", line 748, in forward
    norm_hidden_states = self.norm2(hidden_states)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/modules/normalization.py", line 217, in forward
    return F.layer_norm(
  File "/opt/conda/envs/DiffLight/lib/python3.10/site-packages/torch/nn/functional.py", line 2910, in layer_norm
    return torch.layer_norm(
KeyboardInterrupt
